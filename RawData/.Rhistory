class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
flags$landmass
tabls(flags$landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
cls()
library(datasets)
data("iris")
?iris
tapply(iris$Sepal.Length, iris$Species, mean)
rowMeans(iris[,1:4])
iris[, 1:4]
library(datasets)
data("mtcars")
?mtcars
mean(mtcars$mpg,mtcars$cyl)
with(mtcars, tapply(mpg,cyl, mean))
AverHorsePower <- tapply(mtcars$hp, mtcars$cyl, mean)
AverHorsePower
AverHorsePower$8 - AverHorsePower$4
class(AverHorsePower)
AverHorsePower[1]
AverHorsePower[3] - AverHorsePower[1]
colMeans(iris)
aplly(iris[,1:4], 1, mean)
iris
apply(iris, 2, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[,1:4],  2, mean)
set.seed(1)
rpois(5,2)
class(rpois(5,2))
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100,replace = true, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100,replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob =  0.7)
rbinom(100, size= 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans((my_pois))
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y=cars$dist)
plot(y = cars$speed, x=cars$dist)
plot(x = cars$speed, y=cars$dist)
plot(x = cars$speed, y=cars$dist, xlab = "speed")
plot(x = cars$speed, y=cars$dist, xlab = "Speed")
plot(x = cars$speed, y=cars$dist, xlab = "Speed", ylab =  "Stopping Distance")
plot(x = cars$speed, y=cars$dist, ylab =  "Stopping Distance")
plot(x = cars$speed, y=cars$dist, xlab = "Speed", ylab =  "Stopping Distance")
plat(cars, main = "My Plot")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
)
data("mtcars")
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcar$mpg)
hist(mtcars$mpg)
library(swirl)
install_from_swirl("Getting and Cleaning data")
swirl()
install_from_swirl("Getting_and_Cleaning_Data ")
install.packages("RMySQL")
library(RMySQL)
install.packages("DBI")
install.packages("DBI")
library(DBI)
library(RMySQL)
uscDB <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscDB, "show databases;"); dbDisconnect(uscDB);
result
uscDB <- dbConnect(MySQL(), user = "genome", db = "hg19",  host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(uscDB)
length(allTables)
head(allTables)
dbListFields(uscDB, "HInv")
dbGetQuery(hg19, "select count(*) from HInv")
dbGetQuery(uscDB, "select count(*) from HInv")
dbDisconnect(uscDB)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
getwd()
myapp <- oauth_app("github",
key = "ec693ce41672ed733104",
secret = "5ef1ad1e49393371c82e8668c792add6101daf01")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "ec693ce41672ed733104",
secret = "5ef1ad1e49393371c82e8668c792add6101daf01")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
html <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
htmlContent <- content(html, asText = TRUE)
install.packages("xml2")
library(xml2)
htmlContent <- content(html, asText = TRUE)
?XPathSApply
library(xml)
library(XML)
?XPathSApply
htmlContent
xmlRoot(htmlContent)
htmlParsed = htmlParse(htmlContent, asText = TRUE)
htmlParsed
class(htmlParsed)
xpathSApply(htmlParsed, "//p", xmlValue)
save <- xpathSApply(htmlParsed, "//p", xmlValue)
class(save)
save
rawHTML <- paste(readLines("http://biostat.jhsph.edu/~jleek/contact.html"), collapse="\n")
rawHTML
class(rawHTML)
length(rawHTML)
rawHTML <- readLines("http://biostat.jhsph.edu/~jleek/contact.html")
rawHTML
class(rawHTML)
length(rawHTML)
nchar(rawHTML[c(10,20,30,100)])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", destfile = "ForFile")
install.packages(readr)
install.packages("readr")
library(readr)
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(16, 13, 13, 13))
head(x)
class(x)
sum(x$V4)
str(x)
class(x[[4]])
saveit <- x[[4]]
sum(saveit)
saveit
saveit <- x[[5]]
?fwf
?read.fwf
sum(saveit)
length(saveit)
calcit <- as.numeric(levels(saveit))[saveit]
calcit
levels(saveit)
class(levels(saveit))
as.numeric(as.character(saveit))
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(16,4, 9, 4, 9, 4, 9, 4))
x
names(x)
saveit <- x[[4]]
class(saveit)
calcit <- as.numeric(levels(saveit))[saveit]
calcit
?sum
sum(calcit, na.rm = TRUE)
as.character(saveit)
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(15,4, 9, 4, 9, 4, 9, 4))
x
saveit <- x[[4]]
calcit <- as.numeric(levels(saveit))[saveit]
sum(calcit, na.rm = TRUE)
calcit
saveit
class(saveit)
sum(saveit)
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, x:size)
cran
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "us")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, size > 100500 & !is.na(r_version), r_os == "linux-gnu")
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size /2^20)
mutate(cran3, size_mb = size /2^20, size_gp = size_mb / 2^10)
mutate(cran3, size_mb = size /2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl(()
swirl(
)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, "package")
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantlie(pack_sum$unique, probs= 0.99)
quantile(pack_sum$unique, probs= 0.99)
top_unique <- filter(pack_sum, unique > 465)
view(top_unique)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
sumbmit()
submit()
submit
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count, -grade)
gather(students2, sex_class, count, -grade)
gather( students2, sex_class, count, -grade)
res <- gather( students2, sex_class, count, -grade)
res
?seperate
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
students3
submit()
?spread
submit()
skip()
library(readr)
parse_number("class5")
submit()
play()
students3
res <- gather(students3, class, grade, class1:class5, na.rm= TRUE)
res <- spread(res, test, grade)
res
parse_number(res$class)
nxt()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- failed(passed, status = "failed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(list(passed, failed))
bind_rows(passed, failed)
sat
?separate
submit()
submit()+
submit()
submit()
library(swirl)
swirl()
bye()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19/20/12")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, now())
update(this_moment, hours = 17, minutes = 41)
update(this_moment, hours = 17, minutes = 41, seconds = 0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
?update
depart <- update(depart, hours = hours(depart) + hours(17), minutes = minutes(depart) + minutes(34), seconds= 0)
minutes(depart)
minute(depart)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch(())
stopwatch(
)
setwd("~/Rath/Coursera_ProgrammingAssignment/Quiz_Course3/ProgrammingAssignment/UCI HAR Dataset")
?read.file()
?read.csv
read.table("train\X_train.txt", sep = " ")
read.table("train\\X_train.txt", sep = " ")
read.table("train\\X_train.txt")
help <- read.table("train\\X_train.txt")
head(help)
dim(help)
names <- read.table("features.txt")
names[1:10]
head(names)
head(200)
head(names)
head(names, 200)
class(names$V2)
names(help) <- as.character(names$V2)
names(help)
help_test <- read.table("test\\X_text.txt")
help_test <- read.table("test\\X_test.txt")
dim(help_test)
names(help_test) <- as.character(names$V2)
View(help_test)
merged <- merge(help, help_test)
merged <- merge(help, help_test, by.x = "tBodyAcc-mean()-X")
merged <- merge(help, help_test, by.x = "tBodyAcc-mean()-X", by.y = "tBodyAcc-mean()-X")
names(merged)
dim(merged)
merged <- merge(help, help_test, by.x = "tBodyAcc-mean()-X", by.y = "tBodyAcc-mean()-X", all = TRUE)
dime(merged)
dim(merged)
library(dplyr)
mutate(help, "FromDataSet" = "Train")
names(help)
mutate(help, trainortest = "Test")
savemy <- grepl("mean|std")
savemy <- grepl("mean|std", help)
savemy
sum(savemy)
savemy <- grepl("mean|std", names(help))
savemy
sum(savemy)
help <- help[savemy]
help
dim(help)
mutate(help, TestOrTrain = as.character("train"))
help <- mutate(help, TestOrTrain = as.character("train"))
MovingGroup <- read.table("train\\y_train.txt")
head(MovingGroup)
class(MovingGroup)
class(MovingGroup$V1)
ActivityLabels <- read.table("activity_labels.txt")
head(ActivityLabels)
dim(MovingGroup)
MovingGroupFaktor <- factor(MovingGroup$V1, levels = ActivityLabels$V2)
MovingGroupFaktor
MovingGroupFaktor <- factor(MovingGroup$V1, levels = ActivityLabels)
MovingGroupFaktor
MovingGroup <- as.factor(MovingGroup$V1)
MovingGroup
levels(ActivityLabels$V2)
MovingGroup
levels(MovingGroup) <- ActivityLabels$V2
MovingGroup
mutate(help, activitygroup = MovingGroup)
help <- mutate(-help, activitygroup = MovingGroup)
help <- mutate(help, activitygroup = MovingGroup)
names(help)
?mutate
help <- help[c(81:1)]
help
names(help)
help <- help[c(1:81)]
c(80,81, 1:79)
c(81,80, 1:79)
help <- help[81,80, 1:79]
help
